单例模式的几种常见写法

一、饿汉式单例：在类首次加载时创建对象
优点：线程是安全的；类首次加载时创建对象，在被调用getInstance()时，直接返回对象，效率较高；
缺点：浪费空间

二、懒汉式单例：被外部调用时才创建实例
1)、基本懒汉式单例
优点：延迟加载机制，节约存储空间；
缺点：存在线程安全问题；

2)、synchronized单例：
优点：延迟加载机制，节约存储空间；
缺点：效率较低，在被调用getInstance方法时都会进行同步，消耗资源；

3)、静态内部类单例：
优点：利用类的加载机制，保证只创建一个getInstance()实例，确保线程安全；内部类被使用时才会加载，即延时加载机制，节约存储空间；
缺点：相对来说，增加了类的复杂程度；


三、注册式单例：将每一个实例都缓存到统一的容器中，使用唯一的标识获取实例
1)、枚举式单例
优点：相对于其他单例，枚举式单例写法简单，且在JDK层面就已经保证了线程安全、不被反射破坏，不被序列化破坏；
缺点：JDK1.5以后才有；

2)、容器式单例
优点：对象方便管理，也是属于懒加载
缺点: 存在线程安全问题，使用synchronized代码块，确保线程安全，会消耗资源

四、ThreadLocal单例：保证线程内部的全局唯一，且天生线程安全；
优点：线程内部线程是安全的，方便实现多数据源动态加载
缺点：以时间换空间