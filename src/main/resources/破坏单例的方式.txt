一、单例模式可被以下几种方式破坏；
1、线程安全
懒汉式单例模式时会存在线程安全问题；

解决方法：使用synchronized关键字可以保证线程安全，synchronized方法有可能造成类死锁；
建议使用synchronized代码块，synchronized代码块存在性能影响，在使用synchronized代码块时
用双重检查锁可以避免线程安全且优化程序性能；

懒汉式单例的最优性能写法：内部类实现单例；


2、反射破坏
反射机制是通过强制访问(强吻)类的构造方法来创建对象，破坏了单例；

解决方法：在单例类的私有化构造方法中检查对象是否为空，不为空时抛出异常，即可保护单例不被反射破坏；


3、序列化反序列化破坏
创建一个对象时，将这个对象以序列化的形式写入磁盘，下次使用时，再从磁盘中取出，
以反序列化形式转化成内存对象，反序列化转化的对象会重新分配内存，即重新创建，破坏了单例；
反序列化时jdk会判断是否存在构造方法，存在即重新创建对象，破坏单例
jdk检查单例类中是否存在readResolve，存在即重新赋值前面通过构造方法创建的对象，保护了单例；


解决方法：在单例类中增加readResolve();保护反序列化的对象不会被覆盖；
